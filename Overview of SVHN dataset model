# SVHN Dataset:

The Street View House Numbers (SVHN) dataset is a real-world image dataset widely used for developing machine learning and computer vision algorithms, especially for tasks such as digit recognition. It contains images of house numbers collected from street view images.

Table of Contents

Overview

Dataset Details

File Structure

Data Format

Usage

Preprocessing

Modeling

Results

Contributing

License


Overview

The SVHN dataset is often compared to the well-known MNIST dataset, but it is significantly more challenging due to its real-world setting. SVHN consists of over 600,000 images of house numbers captured in natural environments and contains digits from 0 to 9.

Key Features:

Images come from house number plates taken in a variety of settings.

The dataset is intended for digit recognition in natural scenes, rather than pre-cropped, centered digits.

It contains more variability in terms of lighting, rotation, and background noise compared to datasets like MNIST.


Dataset Details

Number of Classes: 10 (Digits 0-9)

Number of Training Samples: 73,257 images

Number of Testing Samples: 26,032 images

Number of Extra Samples: 531,131 images (less challenging samples for extra training)


Dataset Sources:

Format 1: Cropped digits, similar to MNIST.

Format 2: Full numbers, where each image may contain multiple digits.


File Structure

The dataset is typically divided into three main files:

├── train/
│   ├── image_1.png
│   ├── image_2.png
│   └── ...
├── test/
│   ├── image_1.png
│   ├── image_2.png
│   └── ...
└── extra/
    ├── image_1.png
    ├── image_2.png
    └── ...

Each directory contains corresponding images and digit labels stored in .mat files for ease of loading in Python.

Data Format

Images: The images are in RGB format and have a resolution of 32x32 pixels.

Labels: Labels are provided in .mat files, where each entry corresponds to the digit in an image.


Example:

For the training set:

train_32x32.mat: Contains a 32x32x3 image and a corresponding label.


Usage

1. Download the Dataset

You can download the dataset from the official Stanford link:

Download SVHN


2. Loading the Dataset

You can easily load the dataset using Python libraries like scipy.io to handle .mat files:

import scipy.io as sio

# Load the dataset
train_data = sio.loadmat('train_32x32.mat')
X_train = train_data['X']
y_train = train_data['y']

3. Preprocessing

For preprocessing, common steps include:

Normalization: Scale pixel values between 0 and 1.

One-hot encoding: Convert labels to one-hot format for use in neural networks.

Data Augmentation: Apply transformations such as rotation, zoom, and flips to enhance model robustness.


# Example preprocessing code
X_train = X_train / 255.0  # Normalize images

Modeling

Several machine learning and deep learning models can be trained using this dataset:

Convolutional Neural Networks (CNNs): Due to the spatial nature of the data, CNNs are most commonly used.

Transfer Learning: Pre-trained models like ResNet, VGG can also be fine-tuned on SVHN.


Example Architecture (CNN):

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(32, 32, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

Results

Results for your model can be documented here. For example, accuracy on the test set or validation set can be displayed along with a comparison to other approaches.

Accuracy: 94%

Validation Loss: 0.23

 
